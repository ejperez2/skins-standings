---
title: "Skins Standings"
format: 
  html:
    self-contained: true
    grid:
      body-width: 1200px
editor: visual
---

```{r timestamp, echo=FALSE, results='asis'}
ts <- format(Sys.time(), "%A, %B %d, %Y at %I:%M %p %Z", tz = "America/Chicago")

cat(sprintf(
  "<p style='font-size:14px; color:#555; margin-top:8px;'>
   <strong>Last updated:</strong> %s</p>", ts)
)
```

```{r main-processing, echo=FALSE, message=FALSE, warning=FALSE, cache=FALSE}
# This single code chunk handles EVERYTHING: package installation, scraping, processing, and table creation.
# cache=FALSE ensures the data is re-scraped every single time the document is rendered.

# --- Step 1: Install and Load All Necessary Libraries ---
if (!require("pacman")) install.packages("pacman")
pacman::p_load(httr, jsonlite, rvest, dplyr, tidyr, knitr, kableExtra, tibble, stringr, ggplot2, scales) 
# --- Step 2: Scrape and Process All Data Sources ---

# A: Create Draft Data Frame FIRST (needed for W/L picks)
draft_data <- tribble(
  ~team, ~player, ~abbr, ~skins_pick, ~draft_pick,
  "Utah Jazz", "Eristeo", "UTA", "L", 1,
  "Oklahoma City Thunder", "Matt", "OKC", "W", 2,
  "Washington Wizards", "Brian", "WAS", "L", 4,
  "Brooklyn Nets", "Adam", "BKN", "L", 3,
  "Cleveland Cavaliers", "Thomas", "CLE", "W", 5,
  "Charlotte Hornets", "Brian", "CHA", "L", 9,
  "Denver Nuggets", "Thomas", "DEN", "W", 8,
  "New York Knicks", "Adam", "NYK", "W", 10,
  "Houston Rockets", "Kenneth", "HOU", "W", 6,
  "Phoenix Suns", "Eristeo", "PHX", "L", 12,
  "New Orleans Pelicans", "Matt", "NOP", "L", 11,
  "Orlando Magic", "Kenneth", "ORL", "W", 7,
  "Chicago Bulls", "Thomas", "CHI", "L", 17,
  "Los Angeles Clippers", "Eristeo", "LAC", "W", 13,
  "Minnesota Timberwolves", "Matt", "MIN", "W", 14,
  "Portland Trail Blazers", "Kenneth", "POR", "L", 18,
  "Atlanta Hawks", "Adam", "ATL", "W", 15,
  "Los Angeles Lakers", "Adam", "LAL", "W", 22,
  "Golden State Warriors", "Kenneth", "GSW", "W", 19,
  "Sacramento Kings", "Thomas", "SAC", "L", 20,
  "Detroit Pistons", "Brian", "DET", "W", 21,
  "Indiana Pacers", "Eristeo", "IND", "L", 24,
  "Miami Heat", "Matt", "MIA", "L", 23,
  "Philadelphia 76ers", "Matt", "PHI", "W", 26,
  "Toronto Raptors", "Brian", "TOR", "L", 28,
  "Milwaukee Bucks", "Brian", "MIL", "W", 16,
  "San Antonio Spurs", "Eristeo", "SAS", "W", 25,
  "Memphis Grizzlies", "Kenneth", "MEM", "W", 30,
  "Boston Celtics", "Adam", "BOS", "W", 27,
  "Dallas Mavericks", "Thomas", "DAL", "W", 29
)

# CRITICAL: Create immutable reference table for W/L picks that can NEVER be overwritten
# This prevents any vestigial code from inferring picks based on projections
HARDCODED_PICKS <- draft_data %>% 
  select(team, skins_pick_hardcoded = skins_pick) %>%
  mutate(source = "DRAFT - DO NOT MODIFY")

# Store season completion for later display
season_total_games <- 0
season_completion_pct <- 0

# B: Get current NBA standings using ESPN HTML scraping
nba_standings <- tryCatch({
  espn_url <- "https://www.espn.com/nba/standings"
  espn_page <- read_html(espn_url)
  all_tables <- espn_page %>% html_table(fill = TRUE)
  
  # ESPN has 4 tables: 1=East teams, 2=East stats, 3=West teams, 4=West stats
  if(length(all_tables) >= 4) {
    # East Conference
    east_standings <- tibble(
      team_raw = all_tables[[1]][[1]],
      W = all_tables[[2]]$W,
      L = all_tables[[2]]$L
    )
    
    # West Conference
    west_standings <- tibble(
      team_raw = all_tables[[3]][[1]],
      W = all_tables[[4]]$W,
      L = all_tables[[4]]$L
    )
    
    # Combine and clean
    bind_rows(east_standings, west_standings) %>%
      mutate(
        team_clean = str_replace(team_raw, "^[A-Z]{2,4}(?=[A-Z][a-z])", ""),
        team_clean = trimws(team_clean),
        team = case_when(
          grepl("LACLA Clippers", team_raw) ~ "Los Angeles Clippers",
          grepl("Clippers", team_clean) ~ "Los Angeles Clippers",
          grepl("Lakers", team_clean) ~ "Los Angeles Lakers",
          grepl("Atlanta", team_clean) ~ "Atlanta Hawks",
          grepl("Boston", team_clean) ~ "Boston Celtics",
          grepl("Brooklyn", team_clean) ~ "Brooklyn Nets",
          grepl("Charlotte", team_clean) ~ "Charlotte Hornets",
          grepl("Chicago", team_clean) ~ "Chicago Bulls",
          grepl("Cleveland", team_clean) ~ "Cleveland Cavaliers",
          grepl("Dallas", team_clean) ~ "Dallas Mavericks",
          grepl("Denver", team_clean) ~ "Denver Nuggets",
          grepl("Detroit", team_clean) ~ "Detroit Pistons",
          grepl("Golden State", team_clean) ~ "Golden State Warriors",
          grepl("Houston", team_clean) ~ "Houston Rockets",
          grepl("Indiana", team_clean) ~ "Indiana Pacers",
          grepl("Memphis", team_clean) ~ "Memphis Grizzlies",
          grepl("Miami", team_clean) ~ "Miami Heat",
          grepl("Milwaukee", team_clean) ~ "Milwaukee Bucks",
          grepl("Minnesota", team_clean) ~ "Minnesota Timberwolves",
          grepl("New Orleans", team_clean) ~ "New Orleans Pelicans",
          grepl("New York", team_clean) ~ "New York Knicks",
          grepl("Oklahoma City", team_clean) ~ "Oklahoma City Thunder",
          grepl("Orlando", team_clean) ~ "Orlando Magic",
          grepl("Philadelphia", team_clean) ~ "Philadelphia 76ers",
          grepl("Phoenix", team_clean) ~ "Phoenix Suns",
          grepl("Portland", team_clean) ~ "Portland Trail Blazers",
          grepl("Sacramento", team_clean) ~ "Sacramento Kings",
          grepl("San Antonio", team_clean) ~ "San Antonio Spurs",
          grepl("Toronto", team_clean) ~ "Toronto Raptors",
          grepl("Utah", team_clean) ~ "Utah Jazz",
          grepl("Washington", team_clean) ~ "Washington Wizards",
          TRUE ~ team_clean
        ),
        actual_wins = as.numeric(W),
        actual_losses = as.numeric(L)
      ) %>%
      select(team, actual_wins, actual_losses)
  } else {
    stop("Not enough tables found on ESPN standings page")
  }
}, error = function(e) {
  message("ESPN scraping failed: ", e$message)
  tibble(
    team = c("Atlanta Hawks", "Boston Celtics", "Brooklyn Nets", "Charlotte Hornets",
             "Chicago Bulls", "Cleveland Cavaliers", "Dallas Mavericks", "Denver Nuggets",
             "Detroit Pistons", "Golden State Warriors", "Houston Rockets", "Indiana Pacers",
             "Los Angeles Clippers", "Los Angeles Lakers", "Memphis Grizzlies", "Miami Heat",
             "Milwaukee Bucks", "Minnesota Timberwolves", "New Orleans Pelicans", "New York Knicks",
             "Oklahoma City Thunder", "Orlando Magic", "Philadelphia 76ers", "Phoenix Suns",
             "Portland Trail Blazers", "Sacramento Kings", "San Antonio Spurs", "Toronto Raptors",
             "Utah Jazz", "Washington Wizards"),
    actual_wins = 0,
    actual_losses = 0
  )
})

# Calculate season completion percentage
season_total_games <- sum(nba_standings$actual_wins + nba_standings$actual_losses, na.rm = TRUE)
season_completion_pct <- (season_total_games / 2460) * 100

# B: Scrape Rotowire (Vegas Odds)
url_vegas <- "https://www.rotowire.com/betting/nba/tables/team-futures.php?future=Win%20Totals"
resp_vegas <- GET(url_vegas, add_headers(`User-Agent` = "Mozilla/5.0"))
raw_json <- content(resp_vegas, as = "text", encoding = "UTF-8")
df_vegas <- fromJSON(raw_json, flatten = TRUE) %>% as_tibble()

df_skins <- df_vegas %>%
  select(
    team = name,
    mgm_total = mgm_line, mgm_under = mgm_odds_under, mgm_over = mgm_odds,
    draftkings_total = draftkings_line, draftkings_under = draftkings_odds_under, draftkings_over = draftkings_odds,
    caesars_total = caesars_line, caesars_under = caesars_odds_under, caesars_over = caesars_odds,
    betrivers_total = betrivers_line, betrivers_under = betrivers_odds_under, betrivers_over = betrivers_odds,
    hardrock_total = hardrock_line, hardrock_under = hardrock_odds_under, hardrock_over = hardrock_odds,
    fanduel_total = fanduel_line, fanduel_under = fanduel_odds_under, fanduel_over = fanduel_odds,
    espnbet_total = espnbet_line, espnbet_under = espnbet_odds_under, espnbet_over = espnbet_odds
  ) %>%
  mutate(across(ends_with(c("_total", "_under", "_over")), as.numeric)) %>%
  rowwise() %>%
  mutate(
    # Adjust each total based on over/under odds
    mgm_adj = mgm_total + if_else(mgm_total > 41, 0.5 * (mgm_over > mgm_under), -0.5 * (mgm_under > mgm_over)),
    draftkings_adj = draftkings_total + if_else(draftkings_total > 41, 0.5 * (draftkings_over > draftkings_under), -0.5 * (draftkings_under > draftkings_over)),
    caesars_adj = caesars_total + if_else(caesars_total > 41, 0.5 * (caesars_over > caesars_under), -0.5 * (caesars_under > caesars_over)),
    betrivers_adj = betrivers_total + if_else(betrivers_total > 41, 0.5 * (betrivers_over > betrivers_under), -0.5 * (betrivers_under > betrivers_over)),
    hardrock_adj = hardrock_total + if_else(hardrock_total > 41, 0.5 * (hardrock_over > hardrock_under), -0.5 * (hardrock_under > hardrock_over)),
    fanduel_adj = fanduel_total + if_else(fanduel_total > 41, 0.5 * (fanduel_over > fanduel_under), -0.5 * (fanduel_under > fanduel_over)),
    espnbet_adj = espnbet_total + if_else(espnbet_total > 41, 0.5 * (espnbet_over > espnbet_under), -0.5 * (espnbet_under > espnbet_over)),
    # Calculate composite projection as mean of adjusted totals (PROJECTED WINS, not skins)
    composite_projection = mean(c(mgm_adj, draftkings_adj, caesars_adj, betrivers_adj, hardrock_adj, fanduel_adj, espnbet_adj), na.rm = TRUE)
  ) %>%
  ungroup() %>%
  # Store as projected WINS - we'll apply draft picks later
  mutate(
    vegas_proj_wins = composite_projection
  )

# C: Scrape TeamRankings
url_tr <- "https://www.teamrankings.com/nba/projections/standings/"
webpage_tr <- read_html(url_tr)
combined_proj <- bind_rows(webpage_tr %>% html_table() %>% .[[1]], webpage_tr %>% html_table() %>% .[[2]])
tr_cleaned <- combined_proj %>%
  select(team_tr = 1, filter_col = 2, tr_proj_w = 4, tr_proj_l = 5) %>%
  filter(!grepl("overall", filter_col, ignore.case = TRUE)) %>%
  mutate(
    tr_proj_w = as.numeric(tr_proj_w),
    tr_proj_l = as.numeric(tr_proj_l)
  )

# D: Scrape ESPN BPI
url_espn <- "https://www.espn.com/nba/bpi/_/view/projections"
webpage_espn <- read_html(url_espn)
espn_proj <- bind_cols(webpage_espn %>% html_table() %>% .[[1]], webpage_espn %>% html_table() %>% .[[2]])
espn_cleaned <- espn_proj %>%
  select(team = Team, ovr_wl = `OVR W-L`) %>%
  separate(ovr_wl, into = c("espn_proj_w", "espn_proj_l"), sep = "-", convert = TRUE) %>%
  mutate(team = case_when(team == "LA Clippers" ~ "Los Angeles Clippers", TRUE ~ team))

# E: Scrape CBS Sports
url_cbs <- "https://www.cbssports.com/nba/standings/"
webpage_cbs <- read_html(url_cbs)
tables_cbs <- webpage_cbs %>% html_table(fill = TRUE)

# Extract Eastern and Western conferences
eastern_conf <- tables_cbs[[1]]
western_conf <- tables_cbs[[2]]

# Combine both conferences
cbs_proj <- bind_rows(eastern_conf, western_conf) %>%
  select(team_cbs = 2, cbs_proj_w = 16) %>%
  filter(team_cbs != "Team") %>%  # Remove header rows
  mutate(cbs_proj_w = as.numeric(cbs_proj_w))

# --- Step 3: Combine All Projections ---

# Create a master team name crosswalk function to standardize ALL sources
standardize_team_names <- function(df, team_col) {
  df %>%
    mutate(
      !!sym(team_col) := case_when(
        grepl("Okla City|Oklahoma City", !!sym(team_col), ignore.case = TRUE) ~ "Oklahoma City Thunder",
        grepl("Boston", !!sym(team_col), ignore.case = TRUE) ~ "Boston Celtics",
        grepl("Cleveland|Cavaliers", !!sym(team_col), ignore.case = TRUE) ~ "Cleveland Cavaliers",
        grepl("Denver|Nuggets", !!sym(team_col), ignore.case = TRUE) ~ "Denver Nuggets",
        grepl("Houston|Rockets", !!sym(team_col), ignore.case = TRUE) ~ "Houston Rockets",
        grepl("New York|Knicks", !!sym(team_col), ignore.case = TRUE) ~ "New York Knicks",
        grepl("Orlando|Magic", !!sym(team_col), ignore.case = TRUE) ~ "Orlando Magic",
        grepl("Minnesota|Timberwolves", !!sym(team_col), ignore.case = TRUE) ~ "Minnesota Timberwolves",
        grepl("LA Clippers|Clippers", !!sym(team_col), ignore.case = TRUE) ~ "Los Angeles Clippers",
        grepl("LA Lakers|Lakers", !!sym(team_col), ignore.case = TRUE) ~ "Los Angeles Lakers",
        grepl("Atlanta|Hawks", !!sym(team_col), ignore.case = TRUE) ~ "Atlanta Hawks",
        grepl("Golden State|Warriors", !!sym(team_col), ignore.case = TRUE) ~ "Golden State Warriors",
        grepl("Detroit|Pistons", !!sym(team_col), ignore.case = TRUE) ~ "Detroit Pistons",
        grepl("Milwaukee|Bucks", !!sym(team_col), ignore.case = TRUE) ~ "Milwaukee Bucks",
        grepl("San Antonio|Spurs", !!sym(team_col), ignore.case = TRUE) ~ "San Antonio Spurs",
        grepl("Philadelphia|76ers|Sixers", !!sym(team_col), ignore.case = TRUE) ~ "Philadelphia 76ers",
        grepl("Memphis|Grizzlies", !!sym(team_col), ignore.case = TRUE) ~ "Memphis Grizzlies",
        grepl("Dallas|Mavericks", !!sym(team_col), ignore.case = TRUE) ~ "Dallas Mavericks",
        grepl("Toronto|Raptors", !!sym(team_col), ignore.case = TRUE) ~ "Toronto Raptors",
        grepl("Indiana|Pacers", !!sym(team_col), ignore.case = TRUE) ~ "Indiana Pacers",
        grepl("Miami|Heat", !!sym(team_col), ignore.case = TRUE) ~ "Miami Heat",
        grepl("Sacramento|Kings", !!sym(team_col), ignore.case = TRUE) ~ "Sacramento Kings",
        grepl("Portland|Trail Blazers|Blazers", !!sym(team_col), ignore.case = TRUE) ~ "Portland Trail Blazers",
        grepl("Phoenix|Suns", !!sym(team_col), ignore.case = TRUE) ~ "Phoenix Suns",
        grepl("Chicago|Bulls", !!sym(team_col), ignore.case = TRUE) ~ "Chicago Bulls",
        grepl("New Orleans|Pelicans", !!sym(team_col), ignore.case = TRUE) ~ "New Orleans Pelicans",
        grepl("Charlotte|Hornets", !!sym(team_col), ignore.case = TRUE) ~ "Charlotte Hornets",
        grepl("Washington|Wizards", !!sym(team_col), ignore.case = TRUE) ~ "Washington Wizards",
        grepl("Brooklyn|Nets", !!sym(team_col), ignore.case = TRUE) ~ "Brooklyn Nets",
        grepl("Utah|Jazz", !!sym(team_col), ignore.case = TRUE) ~ "Utah Jazz",
        TRUE ~ !!sym(team_col)
      )
    )
}

# Apply standardization to all data sources
df_skins <- df_skins %>% standardize_team_names("team")
nba_standings <- nba_standings %>% standardize_team_names("team")

# TeamRankings crosswalk
tr_cleaned <- tr_cleaned %>%
  rename(team = team_tr) %>%
  standardize_team_names("team") %>%
  select(team, tr_proj_w)

# ESPN BPI already has team column, just standardize it
espn_cleaned <- espn_cleaned %>% standardize_team_names("team")

# CBS Sports team name crosswalk and standardization
cbs_proj <- cbs_proj %>%
  rename(team = team_cbs) %>%
  mutate(
    team = case_when(
      grepl("Golden St", team, ignore.case = TRUE) ~ "Golden State Warriors",
      grepl("L.A. Lakers", team, ignore.case = TRUE) ~ "Los Angeles Lakers",
      grepl("L.A. Clippers", team, ignore.case = TRUE) ~ "Los Angeles Clippers",
      TRUE ~ team
    )
  ) %>%
  standardize_team_names("team") %>%
  select(team, cbs_proj_w)

# Now combine with consistent team names
# Start with a complete list of all 30 teams to ensure no teams are missing
all_teams <- tibble(
  team = c("Atlanta Hawks", "Boston Celtics", "Brooklyn Nets", "Charlotte Hornets",
           "Chicago Bulls", "Cleveland Cavaliers", "Dallas Mavericks", "Denver Nuggets",
           "Detroit Pistons", "Golden State Warriors", "Houston Rockets", "Indiana Pacers",
           "Los Angeles Clippers", "Los Angeles Lakers", "Memphis Grizzlies", "Miami Heat",
           "Milwaukee Bucks", "Minnesota Timberwolves", "New Orleans Pelicans", "New York Knicks",
           "Oklahoma City Thunder", "Orlando Magic", "Philadelphia 76ers", "Phoenix Suns",
           "Portland Trail Blazers", "Sacramento Kings", "San Antonio Spurs", "Toronto Raptors",
           "Utah Jazz", "Washington Wizards")
)

# Join all data sources to the complete team list
# CRITICAL: Join hardcoded W/L picks LAST to overwrite any vestigial inference code
# NOTE: Do NOT join 'player' here - it causes conflicts when joining with draft_data later
df_final_projections <- all_teams %>%
  left_join(draft_data %>% select(team, abbr), by = "team") %>%
  left_join(df_skins, by = "team") %>%
  left_join(tr_cleaned, by = "team") %>%
  left_join(espn_cleaned %>% select(team, espn_proj_w), by = "team") %>%
  left_join(cbs_proj, by = "team") %>%
  left_join(nba_standings, by = "team") %>%
  # Join hardcoded picks LAST to ensure they are NEVER overwritten
  left_join(HARDCODED_PICKS, by = "team") %>%
  mutate(
    # Use ONLY the hardcoded pick - never infer from projections
    skins_pick = skins_pick_hardcoded,
    
    # NOW apply the hardcoded W/L pick to each projection source to get skins
    # Vegas: use projected wins if W pick, else use projected losses (82 - wins)
    vegas_consensus = if_else(skins_pick == "W", vegas_proj_wins, 82 - vegas_proj_wins),
    
    # TeamRankings: use projected wins if W pick, else use projected losses
    tr_skins = if_else(skins_pick == "W", tr_proj_w, 82 - tr_proj_w),
    
    # ESPN BPI: use projected wins if W pick, else use projected losses
    espn_skins = if_else(skins_pick == "W", espn_proj_w, 82 - espn_proj_w),
    
    # CBS: use projected wins if W pick, else use projected losses
    cbs_skins = if_else(skins_pick == "W", cbs_proj_w, 82 - cbs_proj_w),
    
    # Calculate weighted average using skins (which now correctly apply draft picks)
    weighted_average = if_else(
      !is.na(vegas_consensus),
      (vegas_consensus * 0.25) + (tr_skins * 0.38) + (espn_skins * 0.25) + (cbs_skins * 0.12),
      (tr_skins * 0.50) + (espn_skins * 0.34) + (cbs_skins * 0.16)  # Fallback formula without Vegas
    ),
    
    # Calculate actual skins based on HARDCODED pick type from draft (never inferred)
    actual_skins = if_else(skins_pick == "W", actual_wins, actual_losses),
    
    # Calculate games played and skins percentage
    games_played = actual_wins + actual_losses,
    skins_pct = if_else(games_played > 0, actual_skins / games_played, 0),
    pct_projected = skins_pct * 82
  ) %>%
  # Remove the temporary hardcoded column to keep data clean
  select(-skins_pick_hardcoded, -source)

# VERIFICATION: Ensure all W/L picks match the hardcoded draft values
verification <- df_final_projections %>%
  select(team, skins_pick) %>%
  left_join(HARDCODED_PICKS %>% select(team, expected = skins_pick_hardcoded), by = "team") %>%
  filter(skins_pick != expected | is.na(skins_pick))

if(nrow(verification) > 0) {
  warning("W/L PICKS DO NOT MATCH DRAFT! Mismatched teams: ", 
          paste(verification$team, collapse = ", "))
}

# Get today's date for historical tracking
today <- Sys.Date()

# --- Step 4.5: Handle Missing Vegas Data with Historical Values ---
# File to store team-level historical vegas consensus
team_vegas_history_file <- "team_vegas_history.csv"

# Prepare current team vegas data (store projected WINS, not skins)
current_team_vegas <- df_final_projections %>%
  select(team, vegas_proj_wins) %>%
  mutate(date = today)

# Load existing team vegas history if it exists
if(file.exists(team_vegas_history_file)) {
  team_vegas_history <- read.csv(team_vegas_history_file, stringsAsFactors = FALSE) %>%
    mutate(date = as.Date(date))
  
  # Remove today's data if it exists
  team_vegas_history <- team_vegas_history %>%
    filter(date != today)
  
  # Add current data
  team_vegas_history <- bind_rows(team_vegas_history, current_team_vegas) %>%
    arrange(team, date)
} else {
  # Create new history file
  team_vegas_history <- current_team_vegas
}

# For teams with NA vegas_proj_wins, find the last non-NA value
df_final_projections <- df_final_projections %>%
  rowwise() %>%
  mutate(
    vegas_proj_wins = if_else(
      is.na(vegas_proj_wins),
      {
        # Find last non-NA value for this team from history
        current_team <- team
        last_valid <- team_vegas_history %>%
          filter(team == current_team, !is.na(vegas_proj_wins), date < today) %>%
          arrange(desc(date)) %>%
          slice(1) %>%
          pull(vegas_proj_wins)
        
        if(length(last_valid) > 0) last_valid else NA_real_
      },
      vegas_proj_wins
    )
  ) %>%
  ungroup()

# Recalculate vegas_consensus by applying hardcoded W/L picks to filled-in projected wins
df_final_projections <- df_final_projections %>%
  mutate(
    vegas_consensus = if_else(skins_pick == "W", vegas_proj_wins, 82 - vegas_proj_wins),
    # Recalculate weighted average with updated vegas values
    weighted_average = if_else(
      !is.na(vegas_consensus),
      (vegas_consensus * 0.25) + (tr_skins * 0.38) + (espn_skins * 0.25) + (cbs_skins * 0.12),
      (tr_skins * 0.50) + (espn_skins * 0.34) + (cbs_skins * 0.16)
    )
  )

# Save updated team vegas history
write.csv(team_vegas_history, team_vegas_history_file, row.names = FALSE)

# --- Step 5: Calculate Player Scores ---
player_scores <- draft_data %>%
  left_join(df_final_projections, by = "team") %>%
  group_by(player) %>%
  summarise(
    `Actual Skins` = sum(actual_skins, na.rm = TRUE),
    `Skins %` = sum(actual_skins, na.rm = TRUE) / sum(games_played, na.rm = TRUE),
    `% Projected` = sum(pct_projected, na.rm = TRUE),  # Sum of team projections
    `Weighted Average` = sum(weighted_average, na.rm = TRUE),
    `Vegas Consensus` = sum(vegas_consensus, na.rm = TRUE),
    `TeamRankings` = sum(tr_skins, na.rm = TRUE),
    `ESPN BPI` = sum(espn_skins, na.rm = TRUE),
    `CBS Sports` = sum(cbs_skins, na.rm = TRUE)
  ) %>%
  mutate(Projection_Average = rowMeans(select(., `Weighted Average`, `Vegas Consensus`, `TeamRankings`, `ESPN BPI`, `CBS Sports`))) %>%
  arrange(desc(`Actual Skins`))

# --- Step 6: Prepare Standings Table Data ---
draft_table_data <- df_final_projections %>% 
  select(team, abbr, skins_pick) %>%
  right_join(draft_data, by="team") %>%
  arrange(match(player, c("Eristeo", "Matt", "Brian", "Adam", "Thomas", "Kenneth")))

# --- Step 7: Historical Data Tracking ---
# File to store historical standings
history_file <- "standings_history.csv"

# Calculate current standings for each player (including all projections)
current_standings <- player_scores %>%
  select(
    player, 
    actual_skins = `Actual Skins`,
    skins_pct = `Skins %`,
    pct_projected = `% Projected`,
    weighted_average = `Weighted Average`,
    vegas_consensus = `Vegas Consensus`,
    team_rankings = `TeamRankings`,
    espn_bpi = `ESPN BPI`,
    cbs_sports = `CBS Sports`,
    projection_average = `Projection_Average`
  ) %>%
  mutate(date = today)

# Load existing history if it exists
if(file.exists(history_file)) {
  history <- read.csv(history_file, stringsAsFactors = FALSE) %>%
    mutate(date = as.Date(date))
  
  # Remove today's data if it exists (keep only last render per day)
  history <- history %>%
    filter(date != today) %>%
    bind_rows(current_standings)
} else {
  # Create new history file
  history <- current_standings
}

# Add ONE zero starting point for actual skins chart (day before first real data)
min_date <- min(history$date)
needs_zero_start <- !any(history$actual_skins == 0)

if(needs_zero_start) {
  zero_start <- tibble(
    player = unique(history$player),
    actual_skins = 0,
    skins_pct = 0,
    pct_projected = 0,
    weighted_average = NA,
    vegas_consensus = NA,
    team_rankings = NA,
    espn_bpi = NA,
    cbs_sports = NA,
    projection_average = NA,
    date = min_date - 1
  )
  history <- bind_rows(zero_start, history) %>%
    arrange(date)
}

# Save updated history
write.csv(history, history_file, row.names = FALSE)
```

```{r season-completion-display, echo=FALSE, results='asis'}
# Display season completion percentage
cat(sprintf(
  "<p style='font-size:14px; color:#555; margin-top:4px; margin-bottom:16px;'>
   <strong>Season completion:</strong> %.1f%% (%d of 2,460 games played)</p>", 
  season_completion_pct, season_total_games)
)
```

## Skins Standings (Based on Live Projections and Actual Standings)

```{r player-scores, echo=FALSE}
# Format the player scores for display
player_scores_display <- player_scores %>%
  mutate(
    `Actual Skins` = as.integer(`Actual Skins`),
    `Skins %` = sprintf("%.1f%%", `Skins %` * 100),
    `% Projected` = sprintf("%.1f", `% Projected`),
    `Weighted Average` = sprintf("%.1f", `Weighted Average`),
    `Vegas Consensus` = sprintf("%.1f", `Vegas Consensus`),
    `TeamRankings` = sprintf("%.1f", `TeamRankings`),
    `ESPN BPI` = sprintf("%.1f", `ESPN BPI`),
    `CBS Sports` = sprintf("%.1f", `CBS Sports`),
    `Projection_Average` = sprintf("%.1f", `Projection_Average`)
  )

# Calculate global averages (across all teams in league, not player averages)
league_total_skins <- sum(df_final_projections$actual_skins, na.rm = TRUE)
league_total_games <- sum(df_final_projections$games_played, na.rm = TRUE)
league_skins_pct <- if_else(league_total_games > 0, league_total_skins / league_total_games, 0)

# For % Projected, use mean of player values (not pace-based calculation)
# since player % Projected is sum of team projections, not pace × 82
league_pct_projected_avg <- mean(player_scores$`% Projected`, na.rm = TRUE)

global_avg_row <- tibble(
  player = "League Average",
  `Actual Skins` = as.integer(league_total_skins / 6),  # Average per player
  `Skins %` = sprintf("%.1f%%", league_skins_pct * 100),
  `% Projected` = sprintf("%.1f", league_pct_projected_avg),
  `Weighted Average` = sprintf("%.1f", mean(player_scores$`Weighted Average`, na.rm = TRUE)),
  `Vegas Consensus` = sprintf("%.1f", mean(player_scores$`Vegas Consensus`, na.rm = TRUE)),
  `TeamRankings` = sprintf("%.1f", mean(player_scores$TeamRankings, na.rm = TRUE)),
  `ESPN BPI` = sprintf("%.1f", mean(player_scores$`ESPN BPI`, na.rm = TRUE)),
  `CBS Sports` = sprintf("%.1f", mean(player_scores$`CBS Sports`, na.rm = TRUE)),
  `Projection_Average` = sprintf("%.1f", mean(player_scores$Projection_Average, na.rm = TRUE))
)

# Combine player data with global average
player_scores_with_avg <- bind_rows(player_scores_display, global_avg_row)

kable(player_scores_with_avg, align = c("l", "r", "r", "r", "r", "r", "r", "r", "r", "r")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE, position = "center") %>%
  row_spec(0, bold = TRUE, color = "white", background = "#444444") %>%
  row_spec(nrow(player_scores_with_avg), bold = TRUE, background = "#F0F0F0") %>%  # Highlight average row
  column_spec(1, bold = TRUE) %>%
  column_spec(2, bold = TRUE, background = "#E8F5E9") %>%  # Highlight actual skins
  column_spec(3, bold = TRUE, background = "#FFF9C4") %>%  # Highlight skins %
  column_spec(5, bold = TRUE, background = "#DFF0D8")  # Highlight weighted average
```

## Standings and Projections by player

```{r draft-results, echo=FALSE, results='asis'}
# Create standings table grouped by player
standings_table <- draft_data %>%
  left_join(
    df_final_projections %>% 
      select(
        team, # The join key
        `Actual Skins` = actual_skins,
        `Skins %` = skins_pct,
        `% Projected` = pct_projected,
        `Weighted Average` = weighted_average,
        `Vegas Consensus` = vegas_consensus,
        `TeamRankings` = tr_skins,
        `ESPN BPI` = espn_skins,
        `CBS Sports` = cbs_skins
      ),
    by = "team"
  ) %>%
  # Calculate Projection Average for each team
  rowwise() %>%
  mutate(
    `Projection Average` = mean(c(`Weighted Average`, `Vegas Consensus`, `TeamRankings`, `ESPN BPI`, `CBS Sports`), na.rm = TRUE)
  ) %>%
  ungroup() %>%
  select(
    team,
    Player = player,
    Abbr = abbr,
    `Skins Pick` = skins_pick,
    `Actual Skins`,
    `Skins %`,
    `% Projected`,
    `Weighted Average`,
    `Vegas Consensus`,
    `TeamRankings`,
    `ESPN BPI`,
    `CBS Sports`,
    `Projection Average`
  ) %>%
  arrange(
    match(Player, c("Eristeo", "Matt", "Brian", "Adam", "Thomas", "Kenneth")),
    desc(`Actual Skins`)
  ) %>%
  mutate(
    `Actual Skins` = as.integer(`Actual Skins`),
    `Skins %` = sprintf("%.1f%%", `Skins %` * 100),
    `% Projected` = sprintf("%.1f", `% Projected`),
    `Weighted Average` = sprintf("%.1f", `Weighted Average`),
    `Vegas Consensus` = sprintf("%.1f", `Vegas Consensus`),
    `TeamRankings` = sprintf("%.1f", `TeamRankings`),
    `ESPN BPI` = sprintf("%.1f", `ESPN BPI`),
    `CBS Sports` = sprintf("%.1f", `CBS Sports`),
    `Projection Average` = sprintf("%.1f", `Projection Average`)
  )

# Generate 6 separate tables (one for each player) with no spacing
player_order <- c("Eristeo", "Matt", "Brian", "Adam", "Thomas", "Kenneth")

for(i in seq_along(player_order)) {
  player_name <- player_order[i]
  player_data <- standings_table %>% 
    filter(Player == player_name) %>% 
    select(-team, -Player)
  
  # Add div wrapper with player name above table
  cat('<div style="margin-bottom: 0px; margin-top: ', ifelse(i == 1, '0px', '-1px'), ';">\n')
  cat('<div style="background-color: #666; color: #fff; font-weight: bold; padding: 8px; text-align: center;">', player_name, '</div>\n')
  
  table_html <- kable(
    player_data,
    align = c("c", "c", "r", "r", "r", "r", "r", "r", "r", "r", "r"),
    escape = FALSE
  ) %>%
    kable_styling(
      bootstrap_options = c("striped", "hover", "condensed"),
      full_width = FALSE,
      position = "center"
    ) %>%
    row_spec(0, bold = TRUE, color = "white", background = "#0073C2") %>%
    column_spec(3, bold = TRUE, background = "#E8F5E9") %>%  # Highlight actual skins
    column_spec(4, bold = TRUE, background = "#FFF9C4") %>%  # Highlight skins %
    column_spec(6, bold = TRUE, background = "#DFF0D8")  # Highlight weighted average
  
  cat(as.character(table_html))
  cat('\n</div>\n')
}
```

## Standings and Projections by Team

```{r team-projections, echo=FALSE}
# Select and format the final projections for display
team_projections_table <- df_final_projections %>%
  left_join(draft_data %>% select(team, player), by = "team") %>%
  rowwise() %>%
  mutate(
    `Projection Average` = mean(c(weighted_average, vegas_consensus, tr_skins, espn_skins, cbs_skins), na.rm = TRUE)
  ) %>%
  ungroup() %>%
  select(
    Team = team,
    Player = player,
    `Pick Type` = skins_pick,
    `Actual Skins` = actual_skins,
    `Skins %` = skins_pct,
    `% Projected` = pct_projected,
    `Weighted Average` = weighted_average,
    `Vegas Consensus` = vegas_consensus,
    `TeamRankings` = tr_skins,
    `ESPN BPI` = espn_skins,
    `CBS Sports` = cbs_skins,
    `Projection Average`
  ) %>%
  arrange(desc(`Actual Skins`)) %>%
  mutate(
    `Actual Skins` = as.integer(`Actual Skins`),
    `Skins %` = sprintf("%.1f%%", `Skins %` * 100),
    `% Projected` = sprintf("%.1f", `% Projected`),
    `Weighted Average` = sprintf("%.1f", `Weighted Average`),
    `Vegas Consensus` = sprintf("%.1f", `Vegas Consensus`),
    `TeamRankings` = sprintf("%.1f", `TeamRankings`),
    `ESPN BPI` = sprintf("%.1f", `ESPN BPI`),
    `CBS Sports` = sprintf("%.1f", `CBS Sports`),
    `Projection Average` = sprintf("%.1f", `Projection Average`)
  )

kable(team_projections_table, align = c("l", "l", "c", "r", "r", "r", "r", "r", "r", "r", "r", "r")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE, position = "center") %>%
  row_spec(0, bold = TRUE, color = "white", background = "#444444") %>%
  column_spec(1, bold = TRUE) %>%
  column_spec(4, bold = TRUE, background = "#E8F5E9") %>%  # Highlight actual skins
  column_spec(5, bold = TRUE, background = "#FFF9C4") %>%  # Highlight skins %
  column_spec(7, bold = TRUE, background = "#DFF0D8")  # Highlight weighted average
```

## Skins Over Time
```{r skins-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
library(ggplot2)

# Colorblind-friendly palette (Paul Tol's vibrant scheme)
colorblind_colors <- c(
  "Eristeo" = "#0077BB",   # Blue
  "Brian" = "#CC3311",     # Red
  "Adam" = "#33BBEE",      # Cyan
  "Thomas" = "#009988",    # Teal
  "Kenneth" = "#EE7733",   # Orange
  "Matt" = "#EE3377"       # Magenta
)

# Find the first date with actual games (non-zero skins)
first_game_date <- history %>%
  filter(actual_skins > 0) %>%
  pull(date) %>%
  min()

# Create dataset for actual skins chart starting one day before first game
history_actual <- history %>%
  filter(date >= first_game_date - 1)

# Create time series chart for Actual Skins
ggplot(history_actual, aes(x = date, y = actual_skins, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
  scale_y_continuous(
    limits = c(0, NA),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "Skins over time",
    x = NULL,
    y = "Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```

## Skins % Over Time

```{r skins-pct-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
# Filter out zero values for skins percentage chart
history_skins_pct <- history %>% filter(skins_pct > 0)

ggplot(history_skins_pct, aes(x = date, y = skins_pct, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
  scale_y_continuous(
    labels = function(x) sprintf("%.1f%%", x * 100),
    limits = c(0.45, NA),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "Skins % over time",
    x = NULL,
    y = "Skins %",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```

## % Projected Over Time

```{r pct-projected-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
# Filter out zero values for % projected chart
history_pct_projected <- history %>% filter(pct_projected > 0)

ggplot(history_pct_projected, aes(x = date, y = pct_projected, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
  scale_y_continuous(
    labels = function(x) sprintf("%.1f", x),
    limits = c(180, NA),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "% Projected (Skins % × 82) over time",
    x = NULL,
    y = "Projected Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```

## Weighted Average Projection Over Time

```{r weighted-avg-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
# Filter out NA values for projection charts
history_projections <- history %>% filter(!is.na(weighted_average))

ggplot(history_projections, aes(x = date, y = weighted_average, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
  scale_y_continuous(
    labels = function(x) sprintf("%.1f", x),
    limits = c(220, NA),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "Weighted Average Projection over time",
    x = NULL,
    y = "Projected Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```

## Vegas Consensus Projection Over Time

```{r vegas-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
ggplot(history_projections, aes(x = date, y = vegas_consensus, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
  scale_y_continuous(
    labels = function(x) sprintf("%.1f", x),
    limits = c(220, NA),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "Vegas Consensus Projection over time",
    x = NULL,
    y = "Projected Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```

## TeamRankings Projection Over Time

```{r teamrankings-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
ggplot(history_projections, aes(x = date, y = team_rankings, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
  scale_y_continuous(
    labels = function(x) sprintf("%.1f", x),
    limits = c(220, NA),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "TeamRankings Projection over time",
    x = NULL,
    y = "Projected Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```

## ESPN BPI Projection Over Time

```{r espn-bpi-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
ggplot(history_projections, aes(x = date, y = espn_bpi, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
  scale_y_continuous(
    labels = function(x) sprintf("%.1f", x),
    limits = c(220, NA),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "ESPN BPI Projection over time",
    x = NULL,
    y = "Projected Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```

## CBS Sports Projection Over Time

```{r cbs-sports-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
ggplot(history_projections, aes(x = date, y = cbs_sports, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
  scale_y_continuous(
    labels = function(x) sprintf("%.1f", x),
    limits = c(220, NA),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "CBS Sports Projection over time",
    x = NULL,
    y = "Projected Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```

## Projection Average Over Time

```{r projection-avg-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
ggplot(history_projections, aes(x = date, y = projection_average, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
  scale_y_continuous(
    labels = function(x) sprintf("%.1f", x),
    limits = c(220, NA),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "Projection Average over time",
    x = NULL,
    y = "Projected Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```
