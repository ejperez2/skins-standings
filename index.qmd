---
title: "Skins Standings"
format: 
  html:
    self-contained: true
    grid:
      body-width: 1200px
editor: visual
---

```{r timestamp, echo=FALSE, results='asis'}
ts <- format(Sys.time(), "%A, %B %d, %Y at %I:%M %p %Z", tz = "America/Chicago")

cat(sprintf(
  "<p style='font-size:14px; color:#555; margin-top:8px;'>
   <strong>Last updated:</strong> %s</p>", ts)
)
```

```{r main-processing, echo=FALSE, message=FALSE, warning=FALSE, cache=FALSE}
# This single code chunk handles EVERYTHING: package installation, scraping, processing, and table creation.
# cache=FALSE ensures the data is re-scraped every single time the document is rendered.

# --- Step 1: Install and Load All Necessary Libraries ---
if (!require("pacman")) install.packages("pacman")
# ADDED ggplot2 and scales for charting
pacman::p_load(httr, jsonlite, rvest, dplyr, tidyr, knitr, kableExtra, tibble, stringr, ggplot2, scales)
# --- Step 2: Scrape and Process All Data Sources ---

# A: Create Draft Data Frame FIRST (needed for W/L picks)
draft_data <- tribble(
  ~team, ~player, ~abbr, ~skins_pick, ~draft_pick,
  "Utah Jazz", "Eristeo", "UTA", "L", 1,
  "Oklahoma City Thunder", "Matt", "OKC", "W", 2,
  "Washington Wizards", "Brian", "WAS", "L", 4,
  "Brooklyn Nets", "Adam", "BKN", "L", 3,
  "Cleveland Cavaliers", "Thomas", "CLE", "W", 5,
  "Charlotte Hornets", "Brian", "CHA", "L", 9,
  "Denver Nuggets", "Thomas", "DEN", "W", 8,
  "New York Knicks", "Adam", "NYK", "W", 10,
  "Houston Rockets", "Kenneth", "HOU", "W", 6,
  "Phoenix Suns", "Eristeo", "PHX", "L", 12,
  "New Orleans Pelicans", "Matt", "NOP", "L", 11,
  "Orlando Magic", "Kenneth", "ORL", "W", 7,
  "Chicago Bulls", "Thomas", "CHI", "L", 17,
  "Los Angeles Clippers", "Eristeo", "LAC", "W", 13,
  "Minnesota Timberwolves", "Matt", "MIN", "W", 14,
  "Portland Trail Blazers", "Kenneth", "POR", "L", 18,
  "Atlanta Hawks", "Adam", "ATL", "W", 15,
  "Los Angeles Lakers", "Adam", "LAL", "W", 22,
  "Golden State Warriors", "Kenneth", "GSW", "W", 19,
  "Sacramento Kings", "Thomas", "SAC", "L", 20,
  "Detroit Pistons", "Brian", "DET", "W", 21,
  "Indiana Pacers", "Eristeo", "IND", "L", 24,
  "Miami Heat", "Matt", "MIA", "L", 23,
  "Philadelphia 76ers", "Matt", "PHI", "W", 26,
  "Toronto Raptors", "Brian", "TOR", "L", 28,
  "Milwaukee Bucks", "Brian", "MIL", "W", 16,
  "San Antonio Spurs", "Eristeo", "SAS", "W", 25,
  "Memphis Grizzlies", "Kenneth", "MEM", "W", 30,
  "Boston Celtics", "Adam", "BOS", "W", 27,
  "Dallas Mavericks", "Thomas", "DAL", "W", 29
)

# B: Get current NBA standings using ESPN HTML scraping
nba_standings <- tryCatch({
  espn_url <- "https://www.espn.com/nba/standings"
  espn_page <- read_html(espn_url)
  all_tables <- espn_page %>% html_table(fill = TRUE)
  
  # ESPN has 4 tables: 1=East teams, 2=East stats, 3=West teams, 4=West stats
  if(length(all_tables) >= 4) {
    # East Conference
    east_standings <- tibble(
      team_raw = all_tables[[1]][[1]],
      W = all_tables[[2]]$W,
      L = all_tables[[2]]$L
    )
    
    # West Conference
    west_standings <- tibble(
      team_raw = all_tables[[3]][[1]],
      W = all_tables[[4]]$W,
      L = all_tables[[4]]$L
    )
    
    # Combine and clean
    bind_rows(east_standings, west_standings) %>%
      mutate(
        team_clean = str_replace(team_raw, "^[A-Z]{2,4}(?=[A-Z][a-z])", ""),
        team_clean = trimws(team_clean),
        team = case_when(
          grepl("LACLA Clippers", team_raw) ~ "Los Angeles Clippers",
          grepl("Clippers", team_clean) ~ "Los Angeles Clippers",
          grepl("Lakers", team_clean) ~ "Los Angeles Lakers",
          grepl("Atlanta", team_clean) ~ "Atlanta Hawks",
          grepl("Boston", team_clean) ~ "Boston Celtics",
          grepl("Brooklyn", team_clean) ~ "Brooklyn Nets",
          grepl("Charlotte", team_clean) ~ "Charlotte Hornets",
          grepl("Chicago", team_clean) ~ "Chicago Bulls",
          grepl("Cleveland", team_clean) ~ "Cleveland Cavaliers",
          grepl("Dallas", team_clean) ~ "Dallas Mavericks",
          grepl("Denver", team_clean) ~ "Denver Nuggets",
          grepl("Detroit", team_clean) ~ "Detroit Pistons",
          grepl("Golden State", team_clean) ~ "Golden State Warriors",
          grepl("Houston", team_clean) ~ "Houston Rockets",
          grepl("Indiana", team_clean) ~ "Indiana Pacers",
          grepl("Memphis", team_clean) ~ "Memphis Grizzlies",
          grepl("Miami", team_clean) ~ "Miami Heat",
          grepl("Milwaukee", team_clean) ~ "Milwaukee Bucks",
          grepl("Minnesota", team_clean) ~ "Minnesota Timberwolves",
          grepl("New Orleans", team_clean) ~ "New Orleans Pelicans",
          grepl("New York", team_clean) ~ "New York Knicks",
          grepl("Oklahoma City", team_clean) ~ "Oklahoma City Thunder",
          grepl("Orlando", team_clean) ~ "Orlando Magic",
          grepl("Philadelphia", team_clean) ~ "Philadelphia 76ers",
          grepl("Phoenix", team_clean) ~ "Phoenix Suns",
          grepl("Portland", team_clean) ~ "Portland Trail Blazers",
          grepl("Sacramento", team_clean) ~ "Sacramento Kings",
          grepl("San Antonio", team_clean) ~ "San Antonio Spurs",
          grepl("Toronto", team_clean) ~ "Toronto Raptors",
          grepl("Utah", team_clean) ~ "Utah Jazz",
          grepl("Washington", team_clean) ~ "Washington Wizards",
          TRUE ~ team_clean
        ),
        actual_wins = as.numeric(W),
        actual_losses = as.numeric(L)
      ) %>%
      select(team, actual_wins, actual_losses)
  } else {
    stop("Not enough tables found on ESPN standings page")
  }
}, error = function(e) {
  message("ESPN scraping failed: ", e$message)
  tibble(
    team = c("Atlanta Hawks", "Boston Celtics", "Brooklyn Nets", "Charlotte Hornets",
             "Chicago Bulls", "Cleveland Cavaliers", "Dallas Mavericks", "Denver Nuggets",
             "Detroit Pistons", "Golden State Warriors", "Houston Rockets", "Indiana Pacers",
             "Los Angeles Clippers", "Los Angeles Lakers", "Memphis Grizzlies", "Miami Heat",
             "Milwaukee Bucks", "Minnesota Timberwolves", "New Orleans Pelicans", "New York Knicks",
             "Oklahoma City Thunder", "Orlando Magic", "Philadelphia 76ers", "Phoenix Suns",
             "Portland Trail Blazers", "Sacramento Kings", "San Antonio Spurs", "Toronto Raptors",
             "Utah Jazz", "Washington Wizards"),
    actual_wins = 0,
    actual_losses = 0
  )
})

# B: Scrape Rotowire (Vegas Odds)
url_vegas <- "https://www.rotowire.com/betting/nba/tables/team-futures.php?future=Win%20Totals"
resp_vegas <- GET(url_vegas, add_headers(`User-Agent` = "Mozilla/5.0"))
raw_json <- content(resp_vegas, as = "text", encoding = "UTF-8")
df_vegas <- fromJSON(raw_json, flatten = TRUE) %>% as_tibble()

df_skins <- df_vegas %>%
  select(
    team = name,
    mgm_total = mgm_line, mgm_under = mgm_odds_under, mgm_over = mgm_odds,
    draftkings_total = draftkings_line, draftkings_under = draftkings_odds_under, draftkings_over = draftkings_odds,
    caesars_total = caesars_line, caesars_under = caesars_odds_under, caesars_over = caesars_odds,
    betrivers_total = betrivers_line, betrivers_under = betrivers_odds_under, betrivers_over = betrivers_odds,
    hardrock_total = hardrock_line, hardrock_under = hardrock_odds_under, hardrock_over = hardrock_odds,
    fanduel_total = fanduel_line, fanduel_under = fanduel_odds_under, fanduel_over = fanduel_odds,
    espnbet_total = espnbet_line, espnbet_under = espnbet_odds_under, espnbet_over = espnbet_odds
  ) %>%
  mutate(across(ends_with(c("_total", "_under", "_over")), as.numeric)) %>%
  rowwise() %>%
  mutate(
    # Adjust each total based on over/under odds
    mgm_adj = mgm_total + if_else(mgm_total > 41, 0.5 * (mgm_over > mgm_under), -0.5 * (mgm_under > mgm_over)),
    draftkings_adj = draftkings_total + if_else(draftkings_total > 41, 0.5 * (draftkings_over > draftkings_under), -0.5 * (draftkings_under > draftkings_over)),
    caesars_adj = caesars_total + if_else(caesars_total > 41, 0.5 * (caesars_over > caesars_under), -0.5 * (caesars_under > caesars_over)),
    betrivers_adj = betrivers_total + if_else(betrivers_total > 41, 0.5 * (betrivers_over > betrivers_under), -0.5 * (betrivers_under > betrivers_over)),
    hardrock_adj = hardrock_total + if_else(hardrock_total > 41, 0.5 * (hardrock_over > hardrock_under), -0.5 * (hardrock_under > hardrock_over)),
    fanduel_adj = fanduel_total + if_else(fanduel_total > 41, 0.5 * (fanduel_over > fanduel_under), -0.5 * (fanduel_under > fanduel_over)),
    espnbet_adj = espnbet_total + if_else(espnbet_total > 41, 0.5 * (espnbet_over > espnbet_under), -0.5 * (espnbet_under > espnbet_over)),
    # Calculate composite projection as mean of adjusted totals
    composite_projection = mean(c(mgm_adj, draftkings_adj, caesars_adj, betrivers_adj, hardrock_adj, fanduel_adj, espnbet_adj), na.rm = TRUE)
  ) %>%
  ungroup() %>%
  mutate(
    vegas_consensus = if_else(composite_projection >= 41, composite_projection, 82 - composite_projection)
  )

# C: Scrape TeamRankings
url_tr <- "https://www.teamrankings.com/nba/projections/standings/"
webpage_tr <- read_html(url_tr)
combined_proj <- bind_rows(webpage_tr %>% html_table() %>% .[[1]], webpage_tr %>% html_table() %>% .[[2]])
tr_cleaned <- combined_proj %>%
  select(team_tr = 1, filter_col = 2, tr_proj_w = 4, tr_proj_l = 5) %>%
  filter(!grepl("overall", filter_col, ignore.case = TRUE)) %>%
  mutate(tr_proj_w = as.numeric(tr_proj_w), tr_proj_l = as.numeric(tr_proj_l),
         tr_skins = if_else(tr_proj_w > 41, tr_proj_w, tr_proj_l))

# D: Scrape ESPN BPI
url_espn <- "https://www.espn.com/nba/bpi/_/view/projections"
webpage_espn <- read_html(url_espn)
espn_proj <- bind_cols(webpage_espn %>% html_table() %>% .[[1]], webpage_espn %>% html_table() %>% .[[2]])
espn_cleaned <- espn_proj %>%
  select(team = Team, ovr_wl = `OVR W-L`) %>%
  separate(ovr_wl, into = c("espn_proj_w", "espn_proj_l"), sep = "-", convert = TRUE) %>%
  mutate(team = case_when(team == "LA Clippers" ~ "Los Angeles Clippers", TRUE ~ team),
         espn_skins = if_else(espn_proj_w > 41, espn_proj_w, espn_proj_l))

# --- Step 3: Combine All Projections ---

# Create a master team name crosswalk function to standardize ALL sources
standardize_team_names <- function(df, team_col) {
  df %>%
    mutate(
      !!sym(team_col) := case_when(
        grepl("Okla City|Oklahoma City", !!sym(team_col), ignore.case = TRUE) ~ "Oklahoma City Thunder",
        grepl("Boston", !!sym(team_col), ignore.case = TRUE) ~ "Boston Celtics",
        grepl("Cleveland|Cavaliers", !!sym(team_col), ignore.case = TRUE) ~ "Cleveland Cavaliers",
        grepl("Denver|Nuggets", !!sym(team_col), ignore.case = TRUE) ~ "Denver Nuggets",
        grepl("Houston|Rockets", !!sym(team_col), ignore.case = TRUE) ~ "Houston Rockets",
        grepl("New York|Knicks", !!sym(team_col), ignore.case = TRUE) ~ "New York Knicks",
        grepl("Orlando|Magic", !!sym(team_col), ignore.case = TRUE) ~ "Orlando Magic",
        grepl("Minnesota|Timberwolves", !!sym(team_col), ignore.case = TRUE) ~ "Minnesota Timberwolves",
        grepl("LA Clippers|Clippers", !!sym(team_col), ignore.case = TRUE) ~ "Los Angeles Clippers",
        grepl("LA Lakers|Lakers", !!sym(team_col), ignore.case = TRUE) ~ "Los Angeles Lakers",
        grepl("Atlanta|Hawks", !!sym(team_col), ignore.case = TRUE) ~ "Atlanta Hawks",
        grepl("Golden State|Warriors", !!sym(team_col), ignore.case = TRUE) ~ "Golden State Warriors",
        grepl("Detroit|Pistons", !!sym(team_col), ignore.case = TRUE) ~ "Detroit Pistons",
        grepl("Milwaukee|Bucks", !!sym(team_col), ignore.case = TRUE) ~ "Milwaukee Bucks",
        grepl("San Antonio|Spurs", !!sym(team_col), ignore.case = TRUE) ~ "San Antonio Spurs",
        grepl("Philadelphia|76ers|Sixers", !!sym(team_col), ignore.case = TRUE) ~ "Philadelphia 76ers",
        grepl("Memphis|Grizzlies", !!sym(team_col), ignore.case = TRUE) ~ "Memphis Grizzlies",
        grepl("Dallas|Mavericks", !!sym(team_col), ignore.case = TRUE) ~ "Dallas Mavericks",
        grepl("Toronto|Raptors", !!sym(team_col), ignore.case = TRUE) ~ "Toronto Raptors",
        grepl("Indiana|Pacers", !!sym(team_col), ignore.case = TRUE) ~ "Indiana Pacers",
        grepl("Miami|Heat", !!sym(team_col), ignore.case = TRUE) ~ "Miami Heat",
        grepl("Sacramento|Kings", !!sym(team_col), ignore.case = TRUE) ~ "Sacramento Kings",
        grepl("Portland|Trail Blazers|Blazers", !!sym(team_col), ignore.case = TRUE) ~ "Portland Trail Blazers",
        grepl("Phoenix|Suns", !!sym(team_col), ignore.case = TRUE) ~ "Phoenix Suns",
        grepl("Chicago|Bulls", !!sym(team_col), ignore.case = TRUE) ~ "Chicago Bulls",
        grepl("New Orleans|Pelicans", !!sym(team_col), ignore.case = TRUE) ~ "New Orleans Pelicans",
        grepl("Charlotte|Hornets", !!sym(team_col), ignore.case = TRUE) ~ "Charlotte Hornets",
        grepl("Washington|Wizards", !!sym(team_col), ignore.case = TRUE) ~ "Washington Wizards",
        grepl("Brooklyn|Nets", !!sym(team_col), ignore.case = TRUE) ~ "Brooklyn Nets",
        grepl("Utah|Jazz", !!sym(team_col), ignore.case = TRUE) ~ "Utah Jazz",
        TRUE ~ !!sym(team_col)
      )
    )
}

# Apply standardization to all data sources
df_skins <- df_skins %>% standardize_team_names("team")
nba_standings <- nba_standings %>% standardize_team_names("team")

# TeamRankings crosswalk
tr_cleaned <- tr_cleaned %>%
  rename(team = team_tr) %>%
  standardize_team_names("team") %>%
  select(team, tr_skins)

# ESPN BPI already has team column, just standardize it
espn_cleaned <- espn_cleaned %>% standardize_team_names("team")

# Now combine with consistent team names
# Start with a complete list of all 30 teams to ensure no teams are missing
all_teams <- tibble(
  team = c("Atlanta Hawks", "Boston Celtics", "Brooklyn Nets", "Charlotte Hornets",
           "Chicago Bulls", "Cleveland Cavaliers", "Dallas Mavericks", "Denver Nuggets",
           "Detroit Pistons", "Golden State Warriors", "Houston Rockets", "Indiana Pacers",
           "Los Angeles Clippers", "Los Angeles Lakers", "Memphis Grizzlies", "Miami Heat",
           "Milwaukee Bucks", "Minnesota Timberwolves", "New Orleans Pelicans", "New York Knicks",
           "Oklahoma City Thunder", "Orlando Magic", "Philadelphia 76ers", "Phoenix Suns",
           "Portland Trail Blazers", "Sacramento Kings", "San Antonio Spurs", "Toronto Raptors",
           "Utah Jazz", "Washington Wizards")
)

# Join all data sources to the complete team list
# First get skins_pick and abbr from draft_data
df_final_projections <- all_teams %>%
  left_join(draft_data %>% select(team, abbr, skins_pick), by = "team") %>%
  left_join(df_skins, by = "team") %>%
  left_join(tr_cleaned, by = "team") %>%
  left_join(espn_cleaned %>% select(team, espn_skins), by = "team") %>%
  left_join(nba_standings, by = "team") %>%
  mutate(
    # Calculate weighted average only where Vegas data exists
    weighted_average = if_else(
      !is.na(vegas_consensus),
      (vegas_consensus * 0.31) + (tr_skins * 0.10) + (espn_skins * 0.59),
      (tr_skins * 0.25) + (espn_skins * 0.75)  # Fallback formula without Vegas
    ),
    # Calculate actual skins based on pick type from draft
    actual_skins = if_else(skins_pick == "W", actual_wins, actual_losses)
  )

# --- Step 5: Calculate Player Scores ---
player_scores <- draft_data %>%
  left_join(df_final_projections, by = "team") %>%
  group_by(player) %>%
  summarise(
    `Actual Skins` = sum(actual_skins, na.rm = TRUE),
    `Weighted Average` = sum(weighted_average, na.rm = TRUE),
    `Vegas Consensus` = sum(vegas_consensus, na.rm = TRUE),
    `TeamRankings` = sum(tr_skins, na.rm = TRUE),
    `ESPN BPI` = sum(espn_skins, na.rm = TRUE)
  ) %>%
  mutate(Projection_Average = rowMeans(select(., `Weighted Average`, `Vegas Consensus`, `TeamRankings`, `ESPN BPI`))) %>%
  arrange(desc(`Actual Skins`))

# --- Step 6: Prepare Standings Table Data ---
draft_table_data <- df_final_projections %>% 
  select(team, abbr, skins_pick) %>%
  right_join(draft_data, by="team") %>%
  arrange(match(player, c("Eristeo", "Matt", "Brian", "Adam", "Thomas", "Kenneth")))

# --- Step 7: Historical Data Tracking ---
# File to store historical standings
history_file <- "standings_history.csv"

# Get today's date
today <- Sys.Date()

# Calculate current standings for each player (including all projections)
current_standings <- player_scores %>%
  select(
    player, 
    actual_skins = `Actual Skins`,
    weighted_average = `Weighted Average`,
    vegas_consensus = `Vegas Consensus`,
    team_rankings = `TeamRankings`,
    espn_bpi = `ESPN BPI`,
    projection_average = Projection_Average  # Corrected column name
  ) %>%
  mutate(date = today)

# Load existing history if it exists
if(file.exists(history_file)) {
  history <- read.csv(history_file, stringsAsFactors = FALSE) %>%
    mutate(date = as.Date(date)) %>%
    # *** FIX 1: CLEAN OLD PROJECTION DATA ***
    # Set all projection values before today to NA
    # This makes "today" the first day on projection charts
    # but preserves the `actual_skins` history.
    mutate(
      across(
        c(weighted_average, vegas_consensus, team_rankings, espn_bpi, projection_average),
        ~ if_else(date < today, NA_real_, .x)
      )
    ) %>%
    # *** FIX 2: DE-DUPLICATION ***
    # Keep only the last render for any given day
    group_by(date, player) %>%
    slice_tail(n = 1) %>%
    ungroup() %>%
    # Remove today's old data, it will be replaced
    filter(date != today) %>%
    # Add today's new data
    bind_rows(current_standings)
  
} else {
  # Create new history file
  history <- current_standings
}

# *** FIX 3: ZERO-START ROW ***
# Add starting point at zero for all players IF it doesn't exist
min_date <- min(history$date)
start_date <- min_date - 1

if(!start_date %in% history$date) {
  # Add day-before-first-game with actual_skins = 0 and projections = NA
  zero_start <- tibble(
    player = unique(history$player),
    actual_skins = 0,       # Correctly set to 0 for the skins chart
    weighted_average = NA_real_,  # Set to NA so it doesn't plot
    vegas_consensus = NA_real_,   # Set to NA
    team_rankings = NA_real_,     # Set to NA
    espn_bpi = NA_real_,          # Set to NA
    projection_average = NA_real_, # Set to NA
    date = start_date
  )
  history <- bind_rows(zero_start, history)
}

# Save updated history (this overwrites the file with the cleaned data)
write.csv(history, history_file, row.names = FALSE)


# *** ADD THIS NEW CODE: ***
# Create a new, clean data frame for PROJECTION charts
# This filters out the "zero-start" row AND all old NA'd dates,
# so the projection charts' x-axis will start on the first day of data.
projection_history <- history %>%
  filter(!is.na(weighted_average))

```

## Skins Standings (Based on Live Projections and Actual Standings)

```{r player-scores, echo=FALSE}
kable(player_scores, digits = 1, caption = "Total Player Scores: Actual and Projected") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE, position = "center") %>%
  row_spec(0, bold = TRUE, color = "white", background = "#444444") %>%
  column_spec(1, bold = TRUE) %>%
  column_spec(2, bold = TRUE, background = "#E8F5E9") %>%  # Highlight actual skins
  column_spec(7, bold = TRUE, background = "#DFF0D8")  # Highlight projection average
```

## Standings and Projections by player

```{r draft-results, echo=FALSE}
# CORRECTED standings_table DEFINITION
# We use select() at the end to explicitly choose and rename
# the 9 columns we want to display. This solves the mismatch.
standings_table <- draft_data %>%
  left_join(
    df_final_projections %>% 
      select(
        team, # The join key
        `Actual Skins` = actual_skins,
        `Weighted Average` = weighted_average,
        `Vegas Consensus` = vegas_consensus,
        `TeamRankings` = tr_skins,
        `ESPN BPI` = espn_skins
      ),
    by = "team"
  ) %>%
  # This select() call is the key fix:
  select(
    Team = team,
    Player = player,
    Abbr = abbr,
    `Skins Pick` = skins_pick,
    `Actual Skins`,
    `Weighted Average`,
    `Vegas Consensus`,
    `TeamRankings`,
    `ESPN BPI`
  ) %>%
  arrange(
    match(Player, c("Eristeo", "Matt", "Brian", "Adam", "Thomas", "Kenneth")),
    desc(`Actual Skins`)
  )

# CORRECTED kable() CALL
# The 'col.names' argument is removed because the data frame
# now has the correct column names from the select() above.
kable(
  standings_table,
  digits = 1,
  align = c("l", "l", "c", "c", "r", "r", "r", "r", "r"),
  caption = "Standings by Team with Actual Results and All Projections"
) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed"),
    full_width = FALSE,
    position = "center"
  ) %>%
  row_spec(0, bold = TRUE, color = "white", background = "#0073C2") %>%
  column_spec(5, bold = TRUE, background = "#E8F5E9") %>%  # Highlight actual skins
  column_spec(6, bold = TRUE, background = "#DFF0D8") %>%  # Highlight weighted average
  pack_rows(index = table(factor(standings_table$Player,
                                 levels = c("Eristeo", "Matt", "Brian", "Adam", "Thomas", "Kenneth"))))
```

## Standings and Projections by Team

```{r team-projections, echo=FALSE}
# Select and format the final projections for display
team_projections_table <- df_final_projections %>%
  select(
    Team = team,
    `Pick Type` = skins_pick,
    `Actual Skins` = actual_skins,
    `Weighted Average` = weighted_average,
    `Vegas Consensus` = vegas_consensus,
    `TeamRankings` = tr_skins,
    `ESPN BPI` = espn_skins
  ) %>%
  arrange(desc(`Actual Skins`))

kable(team_projections_table, digits = 1, caption = "Live Skins Projections by Team") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE, position = "center") %>%
  row_spec(0, bold = TRUE, color = "white", background = "#444444") %>%
  column_spec(1, bold = TRUE) %>%
  column_spec(3, bold = TRUE, background = "#E8F5E9") %>%  # Highlight actual skins
  column_spec(4, bold = TRUE, background = "#DFF0D8")  # Highlight weighted average
```

## Skins Over Time

```{r skins-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
library(ggplot2)

# Colorblind-friendly palette (Paul Tol's vibrant scheme)
colorblind_colors <- c(
  "Eristeo" = "#0077BB",   # Blue
  "Brian" = "#CC3311",     # Red
  "Adam" = "#33BBEE",      # Cyan
  "Thomas" = "#009988",    # Teal
  "Kenneth" = "#EE7733",   # Orange
  "Matt" = "#EE3377"       # Magenta
)

# Create time series chart for Actual Skins
ggplot(projection_history, aes(x = date, y = actual_skins, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
  scale_y_continuous(
    limits = c(0, NA),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "Skins over time",
    x = NULL,
    y = "Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```

## Weighted Average Projection Over Time

```{r weighted-avg-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
  ggplot(projection_history, aes(x = date, y = weighted_average, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
 # *** FIX 3: Y-AXIS LIMIT ***
  # Set y-axis limit to 220 and use scales::squish for out-of-bounds values
  scale_y_continuous(
    limits = c(220, NA),
    oob = scales::squish,
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "Weighted Average Projection over time",
    x = NULL,
    y = "Projected Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```

## Vegas Consensus Projection Over Time

```{r vegas-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
ggplot(projection_history, aes(x = date, y = vegas_consensus, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
   scale_y_continuous(
    limits = c(220, NA),
    oob = scales::squish,
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "Vegas Consensus Projection over time",
    x = NULL,
    y = "Projected Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```

## TeamRankings Projection Over Time

```{r teamrankings-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
ggplot(projection_history, aes(x = date, y = team_rankings, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
  scale_y_continuous(
    limits = c(220, NA),
    oob = scales::squish,
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "TeamRankings Projection over time",
    x = NULL,
    y = "Projected Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```

## ESPN BPI Projection Over Time

```{r espn-bpi-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
ggplot(projection_history, aes(x = date, y = espn_bpi, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
  scale_y_continuous(
    limits = c(220, NA),
    oob = scales::squish,
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "ESPN BPI Projection over time",
    x = NULL,
    y = "Projected Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```

## Projection Average Over Time

```{r projection-avg-chart, echo=FALSE, fig.width=12, fig.height=6, warning=FALSE}
ggplot(projection_history, aes(x = date, y = projection_average, color = player, group = player)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2.5) +
  scale_color_manual(values = colorblind_colors) +
  scale_y_continuous(
    limits = c(220, NA),
    oob = scales::squish,
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "Projection Average over time",
    x = NULL,
    y = "Projected Skins",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(size = 16, face = "bold"),
    axis.text = element_text(size = 11),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(color = "gray90"),
    legend.text = element_text(size = 11)
  )
```